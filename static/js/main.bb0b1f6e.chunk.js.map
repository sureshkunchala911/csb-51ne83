{"version":3,"sources":["ChatWindow.js","ChatComposer.js","index.js"],"names":["ChatWindow","_Component","Object","inherits","_super","_createSuper","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","call","apply","concat","componentDidUpdate","prevProps","prevState","props","messagesList","messageListEnd","scrollIntoView","behavior","NameColor","items","RandomGen","Math","floor","random","console","log","createClass","key","value","_this2","color","react_default","a","createElement","className","index_esm","bs_index_esm","isArray","map","oneMessage","index","name","split","output","Fragment","time","text","ref","node","Component","ChatComposer","submitted","_useState","useState","_useState2","slicedToArray","inputStr","setInputStr","_useState3","_useState4","showPicker","setShowPicker","onSubmit","event","preventDefault","onChange","e","target","onClick","val","emoji_picker_react_esm","pickerStyle","width","onEmojiClick","emojiObject","prevInput","emoji","App","src_createSuper","getNewMessage","user_list","RandomNameRender","date","Date","getHours","b","getMinutes","newMessage","updatedMessages","toConsumableArray","state","messages","setState","class","ChatWindow_ChatWindow","src_ChatComposer","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.bb0b1f6e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Math from \"math\";\nimport { MdWavingHand } from \"react-icons/md\";\nimport { BsFillArrowDownSquareFill } from \"react-icons/bs\";\n\n// we are using class component here bcoz functional components cant use react life cycle hooks such as componentDidUpdate\nexport default class ChatWindow extends Component {\n  // if this component received new props, move scroll chat window\n  // to view latest message\n  componentDidUpdate = (prevProps, prevState) => {\n    // if component received new props\n    if (this.props.messagesList !== prevProps.messagesList) {\n      // call ref and scroll\n      this.messageListEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  NameColor = () => {\n    const items = [\"Red\", \"blue\", \"green\"];\n    const RandomGen = items[Math.floor(Math.random() * items.length)];\n    console.log(RandomGen);\n    return RandomGen;\n  };\n\n  render() {\n    // messagesList the got the messages stored in state\n    // destructuring\n    const { messagesList } = this.props;\n    const color = this.NameColor();\n\n    return (\n      <div className=\"chat-window\">\n        <div className=\"box\">\n          <div className=\"inner\">\n            <div className=\"chatMess\">\n              <div>\n                <p className={color}>pB</p>\n              </div>\n              <div className=\"NameAndMess2\">\n                <div className=\"NameAndMess\">\n                  <p className=\"chatName\">PubNub Bot</p>\n                  <p className=\"time\">12:16</p>\n                </div>\n                <p className=\"message\">\n                  Welcome to team chat.\n                  <MdWavingHand className=\"waving\" />\n                  <MdWavingHand className=\"waving\" /> Send a message now to\n                  start interacting with other users in the app.{\" \"}\n                  <BsFillArrowDownSquareFill />\n                </p>\n              </div>\n            </div>\n            {Array.isArray(messagesList) &&\n              messagesList.map((oneMessage, index) => {\n                const name = oneMessage.name.split(\" \");\n                const output = `${name[0][0]}${name[0][1]}`;\n                const color = this.NameColor();\n                return (\n                  <>\n                    <div className=\"chatMess\">\n                      <div>\n                        <p key={index} className={oneMessage.color}>\n                          {output}\n                        </p>\n                      </div>\n                      <div className=\"NameAndMess2\">\n                        <div className=\"NameAndMess\">\n                          <p key={index} className=\"chatName\">\n                            {oneMessage.name}\n                          </p>\n                          <p className=\"time\">{oneMessage.time}</p>\n                        </div>\n                        <p key={index} className=\"message\">\n                          {oneMessage.text}\n                        </p>\n                      </div>\n                    </div>\n                  </>\n                );\n              })}\n            {/* define ref and call it if component is updated */}\n            <div\n              className=\"reference\"\n              ref={(node) => (this.messageListEnd = node)}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component, useState } from \"react\";\nimport Picker from \"emoji-picker-react\";\nimport { BsFillEmojiSunglassesFill } from \"react-icons/bs\";\n\n// we are using class componen coz we need temp state here\nconst ChatComposer = (props) => {\n  const { submitted } = props;\n  const [inputStr, setInputStr] = useState(\"\");\n  const [showPicker, setShowPicker] = useState(false);\n\n  const onEmojiClick = (event, emojiObject) => {\n    setInputStr((prevInput) => prevInput + emojiObject.emoji);\n    setShowPicker(false);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    // send event value to parent component via calling props\n    submitted(inputStr);\n    // remove single message stored in this component state\n    // and empty input coz form was submitted\n    setInputStr(\"\");\n  };\n  return (\n    // dont use event => handle event below\n    // binding won't work here\n    <div className=\"chat-composer\">\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"form-control\"\n          value={inputStr}\n          onChange={(e) => setInputStr(e.target.value)}\n        />\n        <BsFillEmojiSunglassesFill\n          onClick={() => setShowPicker((val) => !val)}\n        />\n        {showPicker && (\n          <Picker pickerStyle={{ width: \"100%\" }} onEmojiClick={onEmojiClick} />\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ChatComposer;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\n\nimport ChatWindow from \"./ChatWindow\";\nimport ChatComposer from \"./ChatComposer\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [\n        {\n          text: \"Second stored message\",\n          name: \"Gregory Goolsby\",\n          time: \"17:28\",\n          color: \"Red\"\n        }\n      ]\n    };\n  }\n\n  // if new message was submitted from child component // process\n  submitted = (getNewMessage) => {\n    if (getNewMessage !== \"\") {\n      // match the state format\n      const user_list = [\"Alan\", \"Bob\", \"Carol\", \"Dean\", \"Elin\"];\n      const RandomNameRender =\n        user_list[Math.floor(Math.random() * user_list.length)];\n      const items = [\"Red\", \"blue\", \"green\"];\n      const RandomGen = items[Math.floor(Math.random() * items.length)];\n      const date = new Date();\n      const a = date.getHours();\n      const b = date.getMinutes();\n      const newMessage = {\n        text: getNewMessage,\n        name: RandomNameRender,\n        time: `${a}:${b}`,\n        color: RandomGen\n      };\n      // merge new message in copy of state stored messages\n      let updatedMessages = [...this.state.messages, newMessage];\n      // update state\n      this.setState({\n        messages: updatedMessages\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"topSec\">\n          <div className=\"introduction\">\n            <h1 className=\"h1\">Introductions</h1>\n            <p className=\"p1\">this Channel is for company wider chatter</p>\n          </div>\n          <div>\n            <p className=\"p2\">\n              3<span>|100</span>\n              <span className=\"multiUser\">\n                <i class=\"fa-solid fa-user-group\"></i>\n              </span>\n            </p>\n          </div>\n        </div>\n        <hr />\n        {/* send stored messages as props to chat window */}\n        <ChatWindow messagesList={this.state.messages} />\n        {/* send submitted props to chat composer */}\n        <ChatComposer submitted={this.submitted} />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}